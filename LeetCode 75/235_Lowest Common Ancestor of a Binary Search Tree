# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x,left = None,right = None):
        self.val = x
        self.left = left
        self.right = right

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        cur = root

        while cur:
            if p.val > cur.val and q.val > cur.val:
                cur = cur.right
            elif p.val < cur.val and q.val < cur.val:
                cur = cur.left
            else:
                return cur

    def tree_travarsal(self,root):
        queue = [root]
        arr = []
        while queue:
            root = queue.pop(0)
            arr.append(root.val)
            if root.left:
                queue.append(root.left)
            if root.right:
                queue.append(root.right)
        return arr
if __name__ == "__main__":
    s = Solution()
    data = TreeNode(6
    ,TreeNode(2,TreeNode(0),TreeNode(4,TreeNode(3),TreeNode(5)))
    ,TreeNode(8,TreeNode(7),TreeNode(9)))

    print(s.tree_travarsal(root=data))
    print(s.lowestCommonAncestor(data,TreeNode(4),TreeNode(3)).val)